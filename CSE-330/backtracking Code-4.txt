Given an incomplete Sudoku configuration in terms of a 9 x 9  2-D square matrix (grid[][]), the task to find a solved Sudoku. For simplicity, you may assume that there will be only one unique solution.

Sample Sudoku for you to get the logic for its solution:




Example 1:

Input:
grid[][] = 
[[3 0 6 5 0 8 4 0 0],
[5 2 0 0 0 0 0 0 0],
[0 8 7 0 0 0 0 3 1 ],
[0 0 3 0 1 0 0 8 0],
[9 0 0 8 6 3 0 0 5],
[0 5 0 0 9 0 6 0 0],
[1 3 0 0 0 0 2 5 0],
[0 0 0 0 0 0 0 7 4],
[0 0 5 2 0 6 3 0 0]]
Output:
3 1 6 5 7 8 4 9 2
5 2 9 1 3 4 7 6 8
4 8 7 6 2 9 5 3 1
2 6 3 4 1 5 9 8 7
9 7 4 8 6 3 1 2 5
8 5 1 7 9 2 6 4 3
1 3 8 9 4 7 2 5 6
6 9 2 3 5 1 8 7 4
7 4 5 2 8 6 3 1 9






Code:

class Solution 
{
    public:
    
     bool isSafe(int grid[N][N], int row, int col, int val){
        int stRow = 3 * (row/3);
        int stCol = 3 * (col/3);
        for(int i = 0;  i < 9; i++){
            
            if(grid[row][i] == val)
                return false;
            else if(grid[i][col] == val){
                return false;
            }
            
            if(grid[stRow + i/3][stCol + i%3] == val){
                return false;
            }
        }
        return true;
    }
    
    bool SolveSudoku(int grid[N][N])  
    { 
        // Your code here
        
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                
                if(grid[i][j] == 0){
                    for(int val = 1; val <= 9; val++){
                        if(isSafe(grid, i, j, val)){
                            grid[i][j] = val;
                            if(SolveSudoku(grid)){
                                return true;
                            }else{
                                grid[i][j] = 0;
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    
    //Function to print grids of the Sudoku.
    void printGrid (int grid[N][N]) 
    {
        // Your code here 
         for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++)
                cout << grid[i][j] << " ";
            // cout << endl;
        }
    }
};