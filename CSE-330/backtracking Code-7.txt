Given two integer N and K. The task is to find the string S of minimum length such that it contains all possible strings of size N as a substring. The characters of the string can be from 0 to K-1.  

Input:
N = 2, K = 2
Output: 
00110
Explanation: 
There are 4 string possible of size N=2 
which contains characters 0,..K-1
(i.e "00", "01","10","11")
"00110" contains all possible string as a 
substring. It also has the minimum length
Example 2:

Input:
N = 2, K = 3
Output: 
0010211220

Code:

class Solution
{
public:
   void dfs(int k , string prev ,  unordered_set<string> &seen , vector<int> &edges){
        for(int i=0 ; i<k ; i++){
            string cur = prev;
            cur+=(i+'0');
            if(seen.find(cur)==seen.end()){
                seen.insert(cur);
                dfs(k,cur.substr(1),seen,edges);
                edges.push_back(i);
            }
        }
    }
    
    string findString(int n, int k) {
        unordered_set<string> seen;
        string startingNode = string(n-1,'0');
        vector<int> edges;
        dfs(k,startingNode,seen,edges);
        
        string ret;
        int l = pow(k,n);
        for(int  i=0 ; i< l ; i++){
            ret+=(edges[i]+'0');
        }
        ret+=startingNode;
        return ret;
    }
};